{"version":3,"sources":["components/Animation.js","data/vehicles.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Animation","defaultOptions","loop","autoplay","animationData","smallSedan","rendererSettings","preserveAspectRatio","options","height","width","React","Component","vehicles","id","type","maintenancePerMile","depreciationPerMile","Main","state","selectedVehicle","cityMileage","highwayMileage","price","distance","includeDepreciation","handleSlider","e","setState","parseFloat","target","value","handleCityMileage","contstrained","handleHighwayMileage","handlePrice","handleDistance","handleDepreciation","prevState","resetValues","calculateTotalCost","costPerMile","displayCostPerMile","totalCost","totalNumber","isNaN","toFixed","className","calculateCostPerMile","averageMileageCost","selectedMaintenanceCost","prelimCost","perMileNumber","min","max","length","this","onChange","placeholder","required","htmlFor","onClick","Header","hidden","handleClick","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7dad56d7.chunk.js","sourcesContent":["import React from 'react';\nimport Lottie from 'react-lottie'\nimport smallSedan from '../lotties/small-sedan.json'\n\nclass Animation extends React.Component {\n    \n    render() {\n        const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: smallSedan,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n        }\n        };\n\n        return(\n            <div>\n                <Lottie options={defaultOptions}\n                    height={350}\n                    width={350}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Animation;\n","export const vehicles = [\n    {\n        id: 1,\n        type: 'Small Sedan',\n        maintenancePerMile: 0.0853,\n        depreciationPerMile: 0.1493,\n    },\n    {\n        id: 2,\n        type: 'Medium Sedan',\n        maintenancePerMile: 0.0918,\n        depreciationPerMile: 0.2113,\n    },\n    {\n        id: 3,\n        type: 'Large Sedan',\n        maintenancePerMile: 0.0949,\n        depreciationPerMile: 0.2707,\n    },\n    {\n        id: 4,\n        type: 'Small SUV',\n        maintenancePerMile: 0.0909,\n        depreciationPerMile: 0.2088,\n    },\n    {\n        id: 5,\n        type: 'Medium SUV',\n        maintenancePerMile: 0.0960,\n        depreciationPerMile: 0.2529,\n    },\n    {\n        id: 6,\n        type: 'Minivan',\n        maintenancePerMile: 0.0873,\n        depreciationPerMile: 0.2690,\n    },\n    {\n        id: 7,\n        type: 'Pickup Truck',\n        maintenancePerMile: 0.0877,\n        depreciationPerMile: 0.2464,\n    },\n    {\n        id: 8,\n        type: 'Hybrid',\n        maintenancePerMile: 0.0770,\n        depreciationPerMile: 0.2058,\n    },\n    {\n        id: 9,\n        type: 'Electric',\n        maintenancePerMile: 0.0660,\n        depreciationPerMile: 0.3500,\n    },\n]\n","import React from 'react';\nimport Animation from './Animation';\n\nimport { vehicles } from '../data/vehicles.js'\n\nclass Main extends React.Component {\n    state = {\n        selectedVehicle: 4,\n        cityMileage: '',\n        highwayMileage: '',\n        price: '',\n        distance: '',\n        includeDepreciation: false\n    };\n\n    handleSlider = (e) => this.setState({ selectedVehicle: parseFloat(e.target.value) });\n    handleCityMileage = (e) => {\n        const contstrained = parseFloat(e.target.value) > 99\n            ? 99\n            : parseFloat(e.target.value)\n        this.setState({ cityMileage: contstrained })\n    };\n    handleHighwayMileage = (e) => {\n        const contstrained = parseFloat(e.target.value) > 99\n            ? 99\n            : parseFloat(e.target.value)\n        this.setState({ highwayMileage: contstrained })\n    };\n    handlePrice = (e) => {\n        const contstrained = parseFloat(e.target.value) > 99\n            ? 99\n            : parseFloat(e.target.value)\n        this.setState({ price: contstrained })\n    };\n    handleDistance = (e) => {\n        const contstrained = parseFloat(e.target.value) > 9999\n            ? 9999\n            : parseFloat(e.target.value)\n        this.setState({ distance: contstrained })\n    };\n    handleDepreciation = () =>\n        this.setState(\n            prevState => ({ includeDepreciation: !prevState.includeDepreciation })\n        );\n    resetValues = () => this.setState({ \n        selectedVehicle: 4,\n        cityMileage: '',\n        highwayMileage: '',\n        price: '',\n        distance: '',\n    })\n\n    calculateTotalCost = (costPerMile, displayCostPerMile) => {\n        const totalCost = costPerMile * this.state.distance;\n\n        // Only display total cost number if all fields are filled\n        const displayTotalCost = !isNaN(this.state.distance) && this.state.distance !== '';\n        const totalNumber = displayTotalCost && displayCostPerMile\n            ? `$${totalCost.toFixed(2)}`\n            : `-`\n\n        return <>\n            <p className=\"cost-snapshot-label\">Total Cost</p>\n            <div className=\"cost-snapshot-value\">{totalNumber}</div>\n        </>\n    }  \n    calculateCostPerMile = () => {\n        const averageMileageCost = (this.state.cityMileage + this.state.highwayMileage)/2;\n        const selectedMaintenanceCost = vehicles[this.state.selectedVehicle].maintenancePerMile;\n        const prelimCost = (this.state.price/averageMileageCost) + selectedMaintenanceCost;\n\n        const costPerMile = this.state.includeDepreciation \n            ? (prelimCost + vehicles[this.state.selectedVehicle].depreciationPerMile) \n            : prelimCost;\n\n        // Only display cost per mile number if all neccessary fields are filled\n        const displayCostPerMile = !isNaN(this.state.cityMileage) && !isNaN(this.state.highwayMileage) && !isNaN(this.state.price) && this.state.cityMileage !== '' && this.state.highwayMileage !== '' && this.state.price !== '';\n        const perMileNumber = displayCostPerMile \n            ? `$${costPerMile.toFixed(2)}`\n            : `-`\n\n        const costDisplay = \n            <section className=\"cost-snapshot-section\">\n                <div>\n                    <p className=\"cost-snapshot-label\">Cost Per Mile</p>\n                    <div className=\"cost-snapshot-value\">\n                        {perMileNumber}\n                    </div>\n                </div>\n                <div>\n                    {this.calculateTotalCost(costPerMile, displayCostPerMile)}\n                </div>\n            </section>\n\n        return costDisplay;\n    }\n\n    render() {\n        return (\n            <>\n                <main className=\"main-content\">\n                    <form>\n                        <div className=\"lottie-container\">\n                            <Animation />\n                        </div>\n                        <div className=\"form-section\">\n                            <p>What type of vehicle do you drive?</p>\n                            <p className=\"disclaimer on\">*Type used to calculate cost of maintenance, repairs, and depreciation.</p>\n                            <input type=\"range\" min=\"0\" max={vehicles.length - 1} value={this.state.selectedVehicle} id=\"type-slider\" onChange={this.handleSlider}/>\n                            <p>{vehicles[this.state.selectedVehicle].type}</p>\n                        </div>\n                        <div className=\"form-section\">\n                            <p>What is your vehicle's gas mileage? (MPG)</p>\n                            <input type=\"number\" max=\"999\" placeholder=\"City\" value={this.state.cityMileage} onChange={this.handleCityMileage} required></input>\n                            <br/>\n                            <input type=\"number\" placeholder=\"Highway\" value={this.state.highwayMileage} onChange={this.handleHighwayMileage} required></input>\n                        </div>\n                        <div className=\"form-section\">\n                            <p>What is the current price of gas? (USD)</p>\n                            <input type=\"number\" placeholder=\"Price\" value={this.state.price} onChange={this.handlePrice} required></input>\n                        </div>\n                        <div className=\"form-section\">\n                            <p>How far did you drive? (mi)</p>\n                            <input type=\"number\" placeholder=\"Distance\" value={this.state.distance} onChange={this.handleDistance} required></input>\n                        </div>\n                        <div className=\"form-section\">\n                            <input type=\"checkbox\" id=\"depreciation-checkbox\" value={this.state.includeDepreciation} onChange={this.handleDepreciation}></input>\n                            <label htmlFor=\"depreciation-checkbox\">Include Depreciation?</label>\n                        </div>\n                    </form>\n                    <div className=\"cost-snapshot\">\n                        <h2>Cost Snapshot</h2>\n                        {this.calculateCostPerMile()}\n                        <button className=\"secondary-button\" onClick={this.resetValues}>Reset</button>\n                    </div>\n                </main>\n\n                {/* <section className=\"donate-section\">\n                    <span>Donate: </span>\n                    <img src=\"./donate-btc.jpg\" alt=\"Bitcoin QR Code\" />\n                    <img src=\"./donate-bch.jpg\" alt=\"Bitcoin Cash QR Code\" />\n                    <img src=\"./donate-eth.jpg\" alt=\"Ethereum QR Code\" />\n                </section> */}\n            </>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\n\nclass Header extends React.Component {\n    state = {\n        hidden: true\n    };\n\n    handleClick = () =>\n        this.setState(\n            prevState => ({ hidden: !prevState.hidden })\n        );\n\n    render() {\n        return (\n            <header> \n                <div className=\"title-section\">\n                    <h1>THE REAL COST OF RIDESHARE</h1>\n                    <div className={`trigger ${!this.state.hidden && \"info-on\"}`} onClick={() => this.handleClick()}>\n                        What is this?<span>▼</span>\n                    </div>\n                    <p className={`disclaimer ${!this.state.hidden && \"info-on\"}`}>\n                        This tool is intended to calculate the true cost of operating your vehicle for a rideshare service. Calculations account for fuel, maintenance, repairs, and depreciation costs. Auto insurance, licensing, registration, taxes, and financing are not included. All values assume 15,000 miles annually and are sourced from\n                        <a href=\"https://exchange.aaa.com/automotive/driving-costs/#.XtwAYJ5Kiu4\"> https://exchange.aaa.com/automotive/driving-costs/#.XtwAYJ5Kiu4</a>\n                        <br/><br/>\n                        Animation Credit: @MohamedIrfan <a href=\"https://lottiefiles.com/irfanzx\">https://lottiefiles.com/irfanzx</a>\n                    </p>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\n\nimport Main from './components/Main';\nimport Header from './components/Header';\n\nfunction App() {\n    return (\n        <div>\n            <Header />\n            <Main />\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}